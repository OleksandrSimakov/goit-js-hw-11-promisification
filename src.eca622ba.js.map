{"version":3,"sources":["index.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","Promise","resolve","reject","delay2","console","log","setTimeout","id","logSuccess","logError","warn","amount","then","catch"],"mappings":";AAoDA,IAAMA,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,EAAkB,SAAAC,GAEf,OAAA,IAAIC,QAAQ,SAACC,EAASC,GACrBC,IAAAA,EAASX,EAA0B,IAAK,KAC9CY,QAAQC,IAAIF,GAERG,WAAW,WACYX,KAAKE,SAAW,GAEjCI,EAAQ,CAACF,EAAYQ,GAAIJ,IAEvBD,EAAOH,EAAYQ,KAExBJ,MAILK,EAAa,SAAAD,GACjBH,QAAQC,IAAmBE,eAAAA,OAAAA,EAAG,GAAmBA,kBAAAA,OAAAA,EAAG,GAApD,QAGIE,EAAW,SAAAF,GACfH,QAAQM,KAAqCH,gCAAAA,OAAAA,EAA7C,+BAaFT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BC,KAAKJ,GACLK,MAAMJ,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BC,KAAKJ,GACLK,MAAMJ,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAC/BC,KAAKJ,GACLK,MAAMJ,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BC,KAAKJ,GACLK,MAAMJ","file":"src.eca622ba.js","sourceRoot":"../src","sourcesContent":["// import './styles.css';\n\n\n// // задание 1\n// const delay = ms => {\n//     return new Promise((resolve) => {\n//         setTimeout(() => {\n//             resolve(ms);\n//         }, ms)\n//     })\n// };\n// const logger = time => console.log(`Resolved after ${time}ms`);\n\n// // Вызовы функции для проверки\n// delay(2000).then(logger); // Resolved after 2000ms\n// delay(1000).then(logger); // Resolved after 1000ms\n// delay(1500).then(logger); // Resolved after 1500ms\n\n\n// // задание 2\n// const users = [\n//   { name: 'Mango', active: true },\n//   { name: 'Poly', active: false },\n//   { name: 'Ajax', active: true },\n//   { name: 'Lux', active: false },\n// ];\n\n// const toggleUserState = (allUsers, userName) => {\n//     const updatedUsers = allUsers.map(user =>\n//         user.name === userName ? { ...user, active: !user.active } : user,\n//     );\n//     return new Promise((resolve) => {\n//         resolve(updatedUsers)\n//     })\n// };\n\n// const logger2 = updatedUsers => console.table(updatedUsers);\n\n// /*\n//  * Сейчас работает так\n//  */\n// // toggleUserState(users, 'Mango', logger2);\n// // toggleUserState(users, 'Lux', logger2);\n\n// /*\n//  * Должно работать так\n//  */\n// toggleUserState(users, 'Mango').then(logger2);\n// toggleUserState(users, 'Lux').then(logger2);\n\n\n// задание 3\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n    \n  return new Promise((resolve, reject) => {\n    const delay2 = randomIntegerFromInterval(200, 500);\n    console.log(delay2)\n\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n            if (canProcess) {\n              resolve([transaction.id, delay2]);\n            } else {\n                reject(transaction.id);\n            }\n        }, delay2);\n    })\n};\n\nconst logSuccess = id => {\n  console.log(`Transaction ${id[0]} processed in ${id[1]}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"]}